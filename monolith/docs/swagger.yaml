basePath: /api/v1
definitions:
  app.Fighter:
    properties:
      base_unit:
        $ref: '#/definitions/app.Unit'
      id:
        type: string
      moves:
        items:
          $ref: '#/definitions/app.Move'
        type: array
      stats:
        $ref: '#/definitions/app.StatGroup'
        description: calculated at level up
      string:
        type: integer
      unit_id:
        description: for hydration
        type: string
      user_id:
        type: string
    type: object
  app.Move:
    properties:
      description:
        type: string
      element:
        type: integer
      id:
        type: string
      metas:
        description: this is tricky, more a demo than anything
        items:
          $ref: '#/definitions/app.MoveMeta'
        type: array
      name:
        type: string
      rest_duration:
        type: integer
    type: object
  app.MoveMeta:
    type: object
  app.StatGroup:
    properties:
      attack:
        type: integer
      defense:
        type: integer
      health:
        type: integer
      speed:
        type: integer
    type: object
  app.Unit:
    properties:
      element:
        type: integer
      id:
        type: string
      name:
        type: string
      stats:
        $ref: '#/definitions/app.StatGroup'
      unit_type:
        description: because `type` is a reserved word
        type: integer
    type: object
  handlers.pong:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Proof of Concept, inmemory Gacha Game
  title: 'Gacha Game: Monolith'
  version: "1.0"
paths:
  /fighters/{id}:
    get:
      consumes:
      - application/json
      description: responds with single fighter
      parameters:
      - description: get fighter by id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Fighter'
      summary: Gets Fighter by ID (Public/Static).
  /my/fighters:
    get:
      consumes:
      - application/json
      description: responds with all the users fighters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/app.Fighter'
            type: array
      summary: Gets Fighters by UserID
  /ping:
    get:
      consumes:
      - application/json
      description: responds with `pong`
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.pong'
      summary: Ensure the API is working/listening
  /units:
    get:
      consumes:
      - application/json
      description: responds with all available single unit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/app.Unit'
            type: array
      summary: Gets Unit by ID (Public/Static).
    post:
      consumes:
      - application/json
      description: responds with the newly created unit
      parameters:
      - description: new unit
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/app.Unit'
      produces:
      - application/json
      responses:
        "200":
          description: newly created unit
          schema:
            $ref: '#/definitions/app.Unit'
      summary: Create Unit (Administrative)
  /units/{id}:
    get:
      consumes:
      - application/json
      description: responds with single unit
      parameters:
      - description: get unit by id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Unit'
      summary: Gets Unit by ID (Public/Static).
swagger: "2.0"
